from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler
from dotenv import load_dotenv
import os

load_dotenv()
from gpt import *
from util import *

TOKEN = os.getenv("TOKEN")

# —Ç—É—Ç –±—É–¥–µ–º–æ –ø–∏—Å–∞—Ç–∏ –Ω–∞—à –∫–æ–¥ :)
async def start(update, context):
    dialog.mode = "main"
    text = load_message("main")
    await send_photo(update, context, "main")
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        "start": "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞",
        "profile": "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Tinder - –ø—Ä–æ—Ñ—ñ–ª—é \uD83D\uDE0E",
        "opener": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞ \uD83E\uDD70",
        "message": "–õ–∏—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ \uD83D\uDE08",
        "date": "–õ–∏—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–∑ –∑—ñ—Ä–∫–∞–º–∏ \uD83D\uDD25",
        "gpt": "–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —á–∞—Ç—É GPT \uD83E\uDDE0"
    })

async def gpt(update, context):
    dialog.mode = "gpt"
    await send_photo(update, context, "gpt")

    msg = load_message("gpt")
    await send_text(update, context, msg)

async def gpt_dialog(update, context):
    text = update.message.text
    prompt = load_prompt("gpt")
    answer = await chatgpt.send_question(prompt, text)
    await  send_text(update, context, answer)

async def date_dialog(update, context):
    text = update.message.text
    my_message = await send_text(update, context, '–î—Ä—É–∫—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...')
    answer = await chatgpt.add_message(text)
    await my_message.edit_text(answer)

async def date (update, context):
    dialog.mode = "date"
    text = load_message("date")
    await send_photo(update, context, "date")
    await send_text_buttons(update, context, text,{
        "date_grande":"–ê—Ä—ñ–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
        "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±—ñ",
        "date_zendaya": "–ó–µ–Ω–¥–µ—è",
        "date_gosling": "–†–∞–π–∞–Ω –ì–æ—Å–ª—ñ–Ω–≥",
        "date_hardy": "–¢–æ–º –•–∞—Ä–¥—ñ",

    })

async def date_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()
    await send_photo(update, context, query)

    names = {
        "date_grande": "–ê—Ä—ñ–∞–Ω—É –ì—Ä–∞–Ω–¥–µ",
        "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±—ñ",
        "date_zendaya": "–ó–µ–Ω–¥–µ—é",
        "date_gosling": "–†–∞–π–∞–Ω–∞ –ì–æ—Å–ª—ñ–Ω–≥–∞",
        "date_hardy": "–¢–æ–º–∞ –•–∞—Ä–¥—ñ",
    }

    person_name = names.get(query, "–æ–±—Ä–∞–Ω—É –æ—Å–æ–±—É")

    await send_text(update, context, f"–ì–∞—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! üòÖ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ {person_name} –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è –∑–∞ 5 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å! ‚ù§Ô∏è")

    prompt = load_prompt(query)
    chatgpt.set_prompt(prompt)

async def message_dialog(update, context):
    text= update.message.text
    dialog.list.append(text)

async def message_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    prompt = load_prompt(query)
    user_chat_history = "/n/n".join(dialog.list)

    my_message = await  send_text(update, context, "–î—É–º–∞—é –Ω–∞–¥ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏...")

    answer = await chatgpt.send_question(prompt, user_chat_history)
    await my_message.edit_text(answer)

async def hello(update, context):
    if dialog.mode == 'gpt':
        await gpt_dialog(update, context)
    elif dialog.mode == "date":
        await date_dialog(update, context)
    elif dialog.mode == "message":
        await message_dialog(update, context)
    elif dialog.mode == "profile":
        await profile_dialog(update, context)
    elif dialog.mode == "opener":
        await opener_dialog(update, context)
    else:
        await send_text(update, context, "–ü—Ä–∏–≤—ñ—Ç!")
        await send_text(update, context, "–¢–∏ –Ω–∞–ø–∏—Å–∞–≤ " + update.message.text)
        await send_text(update, context, "–û–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≤ –º–µ–Ω—é –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")

async def message(update, context):
    dialog.mode = 'message'
    msg = load_message('message')
    await  send_photo(update, context, 'message')
    await  send_text_buttons(update, context, msg, {
        "message_next": "–ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
        "message_date": "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è",

    })

    dialog.list.clear()

async def profile(update, context):
    dialog.mode = 'profile'
    msg = load_message('profile')
    await  send_photo(update, context, 'profile')
    await send_text(update, context, msg)

    dialog.user.clear()
    dialog.counter = 0
    await send_text(update, context, "–í–∞—à–µ —ñ–º º—è —ñ —Å–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?")



async def profile_dialog(update, context):
    text = update.message.text
    dialog.counter += 1

    if  dialog.counter == 1:
        dialog.user['age'] = text
        await send_text(update, context, "–ö–∏–º –≤–∏ –ø—Ä–∞—Ü—é—î—Ç–µ?")
    elif  dialog.counter == 2:
        dialog.user['oppupation'] = text
        await send_text(update, context, "–£ –≤–∞—Å —î —Ö–æ–±–±—ñ?")
    elif dialog.counter == 3:
        dialog.user['hobby'] = text
        await send_text(update, context, "–©–æ –≤–∞–º –ù–ï –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –≤ –ª—é–¥—è—Ö?")
    elif dialog.counter == 4:
        dialog.user['annoys'] = text
        await send_text(update, context, "–ú–µ—Ç–∞ –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞?")
    elif dialog.counter == 5:
        dialog.user['goal'] = text
        prompt = load_prompt('profile')
        user_info = dialog_user_info_to_str(dialog.user)

        my_message = await send_text(update, context, "–ß–∞—Ç GPT –≥–µ–Ω–µ—Ä—É—î –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å. –ó–∞—á–µ–∫–∞–π—Ç–µ –¥–µ–∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥...")
        answer = await chatgpt.send_question(prompt, user_info)

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÅ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —â–µ", callback_data='profile_regenerate')]
        ])

        await my_message.edit_text(answer, reply_markup=keyboard)

async def handle_profile_callback(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == 'profile_regenerate':
        prompt = load_prompt('profile')
        user_info = dialog_user_info_to_str(dialog.user)

        await query.edit_message_reply_markup()
        await query.message.reply_text("üîÅ –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å...")

        answer = await chatgpt.send_question(prompt, user_info)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÅ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —â–µ", callback_data='profile_regenerate')]
        ])
        await query.message.reply_text(answer, reply_markup=keyboard)


async def opener(update, context):
    dialog.mode = 'opener'
    msg = load_message('opener')
    await  send_photo(update, context, 'opener')
    await send_text(update, context, msg)

    dialog.user.clear()
    dialog.counter = 0
    await send_text(update, context, "–Ü–º º—è –¥—ñ–≤—á–∏–Ω–∏/—Ö–ª–æ–ø—Ü—è?")

async def opener_dialog(update, context):
    text = update.message.text
    dialog.counter += 1

    if dialog.counter == 1:
        dialog.user['name'] = text
        await send_text(update, context, "–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ —ó–π/–π–æ–º—É?")
    elif dialog.counter == 2:
        dialog.user['age'] = text
        await send_text(update, context, "–û—Ü—ñ–Ω—ñ—Ç—å —ó—ó/–π–æ–≥–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Å—Ç—å: 1-10 –±–∞–ª—ñ–≤?")
    elif dialog.counter == 3:
        dialog.user['handsome'] = text
        await send_text(update, context, "–ö–∏–º –≤—ñ–Ω/–≤–æ–Ω–∞ –ø—Ä–∞—Ü—é—î?")
    elif dialog.counter == 4:
        dialog.user['occupation'] = text
        await send_text(update, context, "–ú–µ—Ç–∞ –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞?")
    elif dialog.counter == 5:
        dialog.user['goal'] = text

        prompt = load_prompt('opener')
        user_info = dialog_user_info_to_str(dialog.user)

        my_message = await send_text(update, context, "–ß–∞—Ç GPT –≥–µ–Ω–µ—Ä—É—î –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ó–∞—á–µ–∫–∞–π—Ç–µ –¥–µ–∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥...")
        answer = await chatgpt.send_question(prompt, user_info)
        # await my_message.edit_text(answer)

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üëç –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data='opener_like'),
                InlineKeyboardButton("üîÅ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —â–µ", callback_data='opener_regenerate')
            ]
        ])

        await my_message.edit_text(answer, reply_markup=keyboard)


async def handle_opener_callback(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == 'opener_like':
        await query.edit_message_reply_markup()
        await query.message.reply_text("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ. –£—Å–ø—ñ—Ö—ñ–≤ —É –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞—Ö! üòé")

    elif query.data == 'opener_regenerate':
        prompt = load_prompt('opener')
        user_info = dialog_user_info_to_str(dialog.user)

        await query.edit_message_reply_markup()
        await query.message.reply_text("üîÅ –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç...")

        new_answer = await chatgpt.send_question(prompt, user_info)
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üëç –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data='opener_like'),
                InlineKeyboardButton("üîÅ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —â–µ", callback_data='opener_regenerate')
            ]
        ])
        await query.message.reply_text(new_answer, reply_markup=keyboard)

dialog = Dialog()
dialog.mode = None
dialog.list = []
dialog.user ={}
dialog.counter = 0

GPT_TOKEN = os.getenv("GPT_TOKEN")
chatgpt = ChatGptService(token=GPT_TOKEN)

app = ApplicationBuilder().token(TOKEN).build()

#  –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start –∏ /gpt
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("date", date))
app.add_handler(CommandHandler("message", message))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("opener", opener))


#  –¢–µ–∫—Å—Ç—ã –±–µ–∑ –∫–æ–º–∞–Ω–¥
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))

#  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
app.add_handler(CallbackQueryHandler(date_button, pattern="^date_.*"))
app.add_handler(CallbackQueryHandler(message_button, pattern="^message_.*"))
app.add_handler(CallbackQueryHandler(handle_profile_callback, pattern="^profile_"))
app.add_handler(CallbackQueryHandler(handle_opener_callback, pattern="^opener_"))


app.run_polling()

